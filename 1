# Заданные ограничения экрана
WIDTH = 800
HEIGHT = 600

class Point2d:
    def __init__(self, x: int, y: int):
        self._x = 0
        self._y = 0
        self.x = x  # Используем сеттер для проверки при инициализации
        self.y = y  # Используем сеттер для проверки при инициализации

    @property
    def x(self):
        return self._x

    @x.setter
    def x(self, value):
        value = int(value)  # Приводим к целому числу
        if not (0 <= value <= WIDTH):
            raise ValueError(f"x должно быть в диапазоне [0, {WIDTH}]")
        self._x = value

    @property
    def y(self):
        return self._y

    @y.setter
    def y(self, value):
        value = int(value)  # Приводим к целому числу
        if not (0 <= value <= HEIGHT):
            raise ValueError(f"y должно быть в диапазоне [0, {HEIGHT}]")
        self._y = value

    def __eq__(self, other):
        return isinstance(other, Point2d) and self.x == other.x and self.y == other.y

    def __str__(self):
        return f"Point2d({self.x}, {self.y})"

    def __repr__(self):
        return self.__str__()


class Vector2d:
    def __init__(self, x_or_start, y_or_end=None):
        if isinstance(x_or_start, Point2d) and isinstance(y_or_end, Point2d):
            self._x = y_or_end.x - x_or_start.x
            self._y = y_or_end.y - x_or_start.y
        else:
            self._x = int(x_or_start)
            self._y = int(y_or_end)

    @property
    def x(self):
        return self._x

    @x.setter
    def x(self, value):
        self._x = int(value)

    @property
    def y(self):
        return self._y

    @y.setter
    def y(self, value):
        self._y = int(value)

    def __getitem__(self, index):
        if index == 0:
            return self._x
        elif index == 1:
            return self._y
        else:
            raise IndexError("Индекс должен быть 0 или 1")

    def __setitem__(self, index, value):
        if index == 0:
            self._x = int(value)
        elif index == 1:
            self._y = int(value)
        else:
            raise IndexError("Индекс должен быть 0 или 1")

    def __iter__(self):
        return iter((self._x, self._y))

    def __len__(self):
        return 2

    def __eq__(self, other):
        return isinstance(other, Vector2d) and self.x == other.x and self.y == other.y

    def __str__(self):
        return f"Vector2d({self.x}, {self.y})"

    def __repr__(self):
        return self.__str__()

    def __abs__(self):
        return (self.x ** 2 + self.y ** 2) ** 0.5

    def __add__(self, other):
        return Vector2d(self.x + other.x, self.y + other.y)

    def __sub__(self, other):
        return Vector2d(self.x - other.x, self.y - other.y)

    def __mul__(self, scalar):
        return Vector2d(self.x * scalar, self.y * scalar)

    def __truediv__(self, scalar):
        return Vector2d(self.x / scalar, self.y / scalar)

    def dot(self, other):
        return self.x * other.x + self.y * other.y

    @staticmethod
    def dot_product(v1, v2):
        return v1.x * v2.x + v1.y * v2.y

    def cross(self, other):
        return self.x * other.y - self.y * other.x

    @staticmethod
    def cross_product(v1, v2):
        return v1.x * v2.y - v1.y * v2.x

    def mixed_product(self, other1, other2):
        return 0


# Пример использования с демонстрацией изменения координат точки
if __name__ == "__main__":
    # Создаем точку
    p = Point2d(100, 150)
    print(f"Исходная точка: {p}")
    
    # Меняем координаты
    p.x = 200
    p.y = 300
    print(f"Точка после изменения: {p}")
    
    # Пробуем установить недопустимые значения
    try:
        p.x = -50
    except ValueError as e:
        print(f"Ошибка при изменении x: {e}")
    
    try:
        p.y = 700
    except ValueError as e:
        print(f"Ошибка при изменении y: {e}")
    
    # Проверяем, что точка не изменилась после ошибочных попыток
    print(f"Точка после ошибочных попыток: {p}")
    
    # Демонстрация работы с векторами
    v1 = Vector2d(3, 4)
    v2 = Vector2d(p, Point2d(400, 450))
    print(f"\nВектор v1: {v1}")
    print(f"Вектор v2 (из точек): {v2}")
